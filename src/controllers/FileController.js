/** 
 *  @fileOverview Controller for sending adding and writing to files as response to a POST from somewhere.
 *
 *  @author       {@link http://kartoteket.as/team/bard.html}  Bård Røtzer
 *
 *  @requires     NPM:lodash
 *  @requires     NPM:winston
 *  @requires     NPM:Axios
 *  @requires     NPM:fs
 *  @requires     src/utils:urls.js
 */
import fs from 'fs';
import { isString, isArray } from 'util';
import mailer from '@/services/mailer';


/**
 * A class to handle appending and getting data from files
 * 
 * @class FileController
 */
export default class FileController {

  /**
   * @constructor
   * 
   * @param {Object} logger - The winston logger
   * 
   */
  constructor(logger) {
    this.logger = logger

  }

  append(data) {
    const fileName = data.fileName;
    const stub = data.data;
  
    return new Promise((resolve, reject) => {
      const filePath = `${process.env.BASE_PATH}/${fileName}`;

      fs.readFile(filePath, 'utf8', (err, data) => {
        //
        // log and return an error if failed
        //
        if(err) {
          reject({
            message: `failed to open ${filePath}`
          });
        } else {
          //
          // no errors, append the node
          // 
          const obj = JSON.parse(data);
          obj.push(stub);
          const json = JSON.stringify(obj);

          // write back andx say yay
          fs.writeFile(filePath, json, 'utf8', (err) => {
            if(err) {
              reject({
                message: `failed to write to  ${filePath}`
              });
            } else {
              resolve(stub);
            }
          });
        }
      });
    });
  }

  /**
   * Method that handles the autogenerated mail-to-web route 
   * @param {Object} data 
   */
  travellog(data) {
    const fileData = {
      fileName: 'travellog.json',
      data: null,
    }

    return new Promise((resolve, reject) => {
      const body = data['body-plain'];
      if (isString(body)) {
        const args = body.split('##');
        //
        // handle the errors
        // 
        if(!isArray(args) || !args.length) {
          // send a mail bact to the sender informin them that it failes
          mailer.send(data.sender, 'Malformed mail, could not update');
          // and log it
          logger.log({
            level: 'error',
            message: 'failed to update travellog',
          })
          // and reject it
          reject({
            message: 'malformed mail'
          });
        } else {
          // This is good
          fileData.data = {
            date: args[0],
            text: args[1],
            title: data.subject,
          }

          this.append(fileData)
            .then(resolve)
            .catch(reject);
        }
      }
    })
    
  }
}